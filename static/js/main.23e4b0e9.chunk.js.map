{"version":3,"sources":["api/constants.ts","api/getData.ts","redux/actions.ts","redux/reducers/loadReducer.ts","redux/reducers/queryReducer.ts","redux/reducers/dataReducer.ts","redux/reducers/rootReducer.ts","redux/store.ts","components/Comment.tsx","components/CommentList.tsx","components/User.tsx","components/Post.tsx","components/PostList.tsx","components/Search.tsx","components/LoadButton.tsx","components/LoaderContainer.tsx","redux/selectors.ts","App.tsx","api/filter.ts","index.tsx"],"names":["URL","getData","url","a","fetch","response","json","getPosts","getComments","getUsers","type","setIsLoading","value","isLoading","loadState","isLoaded","queryState","query","dataState","posts","users","comments","rootReducer","combineReducers","loadReducer","state","action","queryReducer","dataReducer","filter","post","id","comment","store","createStore","applyMiddleware","thunk","mapDispatchToProps","deleteComment","Comment","connect","name","email","body","onClick","className","CommentList","map","key","User","user","username","city","address","deletePost","Post","title","PostList","Search","handleSearch","onChange","placeholder","LoadButton","handleLoad","LoaderContainer","color","height","width","timeout","selectTodosWithUser","createSelector","length","find","userId","postId","preparePosts","loadData","dispatch","Promise","all","then","setPosts","setUsers","setComments","finally","setQuery","App","props","postsToShow","useMemo","array","queryToLowerCase","toLowerCase","item","includes","filterPosts","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23e4b0e9.chunk.js","sourcesContent":["export const URL = 'https://jsonplaceholder.typicode.com/';\nexport const POSTS = 'posts';\nexport const USERS = 'users';\nexport const COMMENTS = 'comments';\n","import {\n  POSTS, COMMENTS, USERS, URL,\n} from './constants';\n\nasync function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getPosts = (): Promise<PostInterface[]> => {\n  return getData(URL + POSTS);\n};\n\nexport const getComments = (): Promise<CommentInterface[]> => {\n  return getData(URL + COMMENTS);\n};\n\nexport const getUsers = (): Promise<UserInterface[]> => {\n  return getData(URL + USERS);\n};\n\nexport const getPreparedPosts = async (): Promise<PreparedPostInterface[]> => {\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ]\n    = await Promise.all([\n      getPosts(),\n      getUsers(),\n      getComments(),\n    ]);\n\n  return postsFromServer.map(post => ({\n    ...post,\n    user: usersFromServer.find(user => user.id === post.userId) as UserInterface,\n    comments: commentsFromServer.filter(comment => comment.postId === post.id),\n  }));\n};\n","import { ThunkDispatch } from 'redux-thunk';\nimport { Action } from 'redux';\nimport { getPosts, getUsers, getComments } from '../api/getData';\n\nexport const type = {\n  SET_IS_LOADED: 'SET_IS_LOADED',\n  SET_IS_LOADING: 'SET_IS_LOADING',\n  SET_QUERY: 'SET_QUERY',\n  SET_POSTS: 'SET_POSTS',\n  SET_USERS: 'SET_USERS',\n  SET_COMMENTS: 'SET_COMMENTS',\n  DELETE_POST: 'DELETE_POST',\n  DELETE_COMMENT: 'DELETE_COMMENT',\n};\n\nexport const setDeletePost = (id: number) => ({\n  type: type.DELETE_POST,\n  id,\n});\n\nexport const setDeleteComment = (id: number) => ({\n  type: type.DELETE_COMMENT,\n  id,\n});\n\nexport const setIsLoaded = (value: boolean) => ({\n  type: type.SET_IS_LOADED,\n  isLoaded: value,\n});\n\nexport const setIsLoading = (value: boolean) => ({\n  type: type.SET_IS_LOADING,\n  isLoading: value,\n});\n\nexport const setQuery = (value: string) => ({\n  type: type.SET_QUERY,\n  query: value,\n});\n\nexport const setPosts = (posts: PostInterface[]) => ({\n  type: type.SET_POSTS,\n  posts,\n});\n\nexport const setUsers = (users: UserInterface[]) => ({\n  type: type.SET_USERS,\n  users,\n});\n\nexport const setComments = (comments: CommentInterface[]) => ({\n  type: type.SET_COMMENTS,\n  comments,\n});\n\nexport const loadData = () => {\n  return (dispatch: ThunkDispatch<LoadState&DataState, unknown, Action>) => {\n    dispatch(setIsLoading(true));\n\n    Promise.all([getPosts(), getUsers(), getComments()])\n      .then(([posts, users, comments]) => {\n        dispatch(setPosts(posts));\n        dispatch(setUsers(users));\n        dispatch(setComments(comments));\n        dispatch(setIsLoaded(true));\n      })\n      .finally(() => dispatch(setIsLoading(false)));\n  };\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst loadState: LoadState = {\n  isLoaded: false,\n  isLoading: false,\n};\n\nexport const loadReducer = (state = loadState, action: AnyAction): LoadState => {\n  switch (action.type) {\n    case type.SET_IS_LOADED:\n      return {\n        ...state,\n        isLoaded: action.isLoaded,\n      };\n\n    case type.SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst queryState: QueryState = {\n  query: '',\n};\n\nexport const queryReducer = (state = queryState, action: AnyAction): QueryState => {\n  switch (action.type) {\n    case type.SET_QUERY:\n      return {\n        query: action.query,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst dataState: DataState = {\n  posts: [],\n  users: [],\n  comments: [],\n};\n\nexport const dataReducer = (state = dataState, action: AnyAction): DataState => {\n  switch (action.type) {\n    case type.SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n\n    case type.SET_USERS:\n      return {\n        ...state,\n        users: action.users,\n      };\n\n    case type.SET_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments,\n      };\n\n    case type.DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.id !== action.id),\n      };\n\n    case type.DELETE_COMMENT:\n      return {\n        ...state,\n        comments: state.comments.filter(comment => comment.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { loadReducer } from './loadReducer';\nimport { queryReducer } from './queryReducer';\nimport { dataReducer } from './dataReducer';\n\nexport const rootReducer = combineReducers({\n  loadReducer,\n  queryReducer,\n  dataReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducers/rootReducer';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { setDeleteComment } from '../redux/actions';\n\ninterface Props {\n  comment: CommentInterface;\n  deleteComment: (id: number) => void;\n}\n\nconst CommentTemplate: FC<Props> = ({ comment, deleteComment }) => {\n  const {\n    name,\n    email,\n    body,\n    id,\n  } = comment;\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => deleteComment(id)}>X</button>\n      <h5 className=\"comment__name\">{name}</h5>\n      <p className=\"comment__body\">{body}</p>\n      <p className=\"comment__email\">{email}</p>\n    </>\n  );\n};\n\nconst mapDispatchToProps = {\n  deleteComment: setDeleteComment,\n};\n\nexport const Comment = connect(\n  null, mapDispatchToProps,\n)(CommentTemplate);\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments?: CommentInterface[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => (\n  <>\n    {comments && comments.map(comment => (\n      <li key={comment.id} className=\"comment\">\n        <Comment comment={comment} />\n      </li>\n    ))}\n  </>\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { username, email, address } = user;\n  const { city } = address;\n\n  return (\n    <div className=\"user\">\n      <p>{username}</p>\n      <p>{email}</p>\n      <p>{city}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { CommentList } from './CommentList';\nimport { User } from './User';\nimport { setDeletePost } from '../redux/actions';\n\ninterface Props {\n  post: PreparedPostInterface;\n  deletePost: (id: number) => void;\n}\n\nconst PostTemplate: FC<Props> = ({ post, deletePost }) => {\n  const {\n    title,\n    body,\n    comments,\n    user,\n    id,\n  } = post;\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => deletePost(id)}>X</button>\n      <h2>{title}</h2>\n      <p>{body}</p>\n      {user && <User user={user} />}\n      <p>Comments</p>\n      <ul className=\"comments list\">\n        <CommentList comments={comments} />\n      </ul>\n    </>\n  );\n};\n\nconst mapDispatchToProps = {\n  deletePost: setDeletePost,\n};\n\nexport const Post = connect(\n  null,\n  mapDispatchToProps,\n)(PostTemplate);\n","import React, { FC } from 'react';\nimport { Post } from './Post';\n\ninterface Props {\n  posts: PreparedPostInterface[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => (\n  <ul className=\"list\">\n    {posts.map(post => (\n      <li key={post.id} className=\"list__item\">\n        <Post post={post} />\n      </li>\n    ))}\n  </ul>\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  query: string;\n  handleSearch: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const Search: FC<Props> = ({ query, handleSearch }) => (\n  <>\n    <input\n      className=\"search\"\n      type=\"text\"\n      value={query}\n      onChange={handleSearch}\n      placeholder=\"Search...\"\n    />\n  </>\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  handleLoad: () => void;\n}\n\nexport const LoadButton: FC<Props> = ({ handleLoad }) => (\n  <>\n    <button className=\"button\" type=\"button\" onClick={handleLoad}>Load posts</button>\n  </>\n);\n","import React, { FC } from 'react';\nimport Loader from 'react-loader-spinner';\n\nexport const LoaderContainer: FC = () => (\n  <div className=\"loader\">\n    <Loader\n      type=\"Hearts\"\n      color=\"#00BFFF\"\n      height={100}\n      width={100}\n      timeout={3000}\n    />\n  </div>\n);\n","import { createSelector } from 'reselect';\n\nexport const preparePosts = (\n  posts: PostInterface[],\n  users: UserInterface[],\n  comments: CommentInterface[],\n): PreparedPostInterface[] => {\n  return posts.map(post => ({\n    ...post,\n    user: users.find(user => user.id === post.userId) as UserInterface,\n    comments: comments.filter(comment => comment.postId === post.id),\n  }));\n};\n\nconst selectPosts = (state: DataState) => state.posts;\nconst selectUsers = (state: DataState) => state.users;\nconst selectComments = (state: DataState) => state.comments;\n\nexport const selectTodosWithUser = createSelector(\n  selectPosts,\n  selectUsers,\n  selectComments,\n  (posts, users, comments) => {\n    return users.length\n      ? preparePosts(posts, users, comments)\n      : [];\n  },\n);\n","import React, {\n  FC, ChangeEvent, useMemo,\n} from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { PostList } from './components/PostList';\nimport { Search } from './components/Search';\nimport { LoadButton } from './components/LoadButton';\nimport { LoaderContainer } from './components/LoaderContainer';\nimport { filterPosts } from './api/filter';\nimport * as actions from './redux/actions';\nimport { selectTodosWithUser } from './redux/selectors';\n\ninterface Methods {\n  setQuery: (value: string) => void;\n  loadData: () => void;\n}\n\ninterface Props {\n  isLoading: boolean;\n  isLoaded: boolean;\n  query: string;\n  posts: PreparedPostInterface[];\n}\n\nconst AppTemplate: FC<Props & Methods> = (props) => {\n  const {\n    isLoaded,\n    isLoading,\n    query,\n    posts,\n    loadData,\n    setQuery,\n  } = props;\n\n  const handleLoad = async () => {\n    loadData();\n  };\n\n  const handleSearch = (e: ChangeEvent<HTMLInputElement>): void => {\n    setQuery(e.target.value);\n  };\n\n  const postsToShow = useMemo(() => {\n    if (!posts.length) {\n      return [];\n    }\n\n    return filterPosts(query, posts);\n  }, [query, posts]);\n\n  return (\n    <>\n      {isLoaded && <Search query={query} handleSearch={handleSearch} /> }\n      {!isLoaded && <LoadButton handleLoad={handleLoad} />}\n\n      {isLoaded && <PostList posts={postsToShow} />}\n      {isLoading && <LoaderContainer />}\n    </>\n  );\n};\n\nconst mapStateToProps = (\n  state: {\n    loadReducer: LoadState;\n    queryReducer: QueryState;\n    dataReducer: DataState;\n  },\n) => ({\n  isLoaded: state.loadReducer.isLoaded,\n  isLoading: state.loadReducer.isLoading,\n  query: state.queryReducer.query,\n  posts: selectTodosWithUser(state.dataReducer),\n});\n\nconst mapDispatchToProps = {\n  loadData: actions.loadData,\n  setQuery: actions.setQuery,\n};\n\nexport const App = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AppTemplate);\n","export const filterPosts\n= (query: string, array: PreparedPostInterface[]): PreparedPostInterface[] => {\n  const queryToLowerCase = query.toLowerCase();\n\n  return array.filter(item => item.title.toLowerCase().includes(queryToLowerCase)\n          || item.body.toLowerCase().includes(queryToLowerCase));\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}